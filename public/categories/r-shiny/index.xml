<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R-Shiny on Leestory</title>
    <link>//localhost:4321/categories/r-shiny/</link>
    <description>Recent content in R-Shiny on Leestory</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 07 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:4321/categories/r-shiny/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[02] R shiny: Create login page</title>
      <link>//localhost:4321/2025/02-r-shiny-create-login-page/</link>
      <pubDate>Fri, 07 Feb 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/2025/02-r-shiny-create-login-page/</guid>
      <description>&lt;style&gt;&#xD;&#xA;pre code {&#xD;&#xA;    font-size: 14px;&#xD;&#xA;}&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&lt;p&gt;Implementing a typical login page can be quite complex in R shiny.&#xD;&#xA;Implementing such a typical login page requires handling user information and passwords,&#xD;&#xA;which presents limitations when building it in R Shiny.&#xD;&#xA;This post demonstrates how to create a “login page” in an R Shiny app.&#xD;&#xA;More precisely, it might be more appropriate to call it a simulated login page.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;For example, you could create a feature that takes guests&#xD;&#xA;from the login page to the main UI page by simply entering their email address.&#xD;&#xA;Furthermore, you can even have your visitors receive a notification&#xD;&#xA;via email as soon as they enter their email address.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[01] R shiny: Dashboard UI</title>
      <link>//localhost:4321/2025/01-r-shiny-dashboard-ui/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/2025/01-r-shiny-dashboard-ui/</guid>
      <description>&lt;style&gt;&#xD;&#xA;pre code {&#xD;&#xA;    font-size: 14px;&#xD;&#xA;}&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&lt;p&gt;R shiny is a very useful and versatile tool to build your own app using R.&#xD;&#xA;This blog section will walk you through the step-by-step process of how the GAM tool app was built.&#xD;&#xA;Please note that your R environment and package versions may differ from mine.&#xD;&#xA;Today’s topic will cover how the basic UI was set up.&lt;/p&gt;&#xD;&#xA;&lt;p&gt;To begin, let’s set up a simple &lt;code&gt;shiny&lt;/code&gt; application with a basic UI and server structure.&#xD;&#xA;Before creating the app, ensure you have the necessary libraries installed. If not, you can install them using:&lt;/p&gt;</description>
    </item>
    <item>
      <title>[00] R shiny: Getting started</title>
      <link>//localhost:4321/2025/00-r-shiny-getting-started/</link>
      <pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:4321/2025/00-r-shiny-getting-started/</guid>
      <description>&lt;div id=&#34;r-shiny&#34; class=&#34;section level2&#34;&gt;&#xD;&#xA;&lt;h2&gt;R Shiny&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;R Shiny&lt;/strong&gt; is an open-source R package that allows users to build interactive web applications directly in R without requiring extensive knowledge of web development (HTML, CSS, or JavaScript). It is widely used for &lt;strong&gt;data visualization, dashboard creation, and interactive analytics&lt;/strong&gt;. Shiny applications run in a web browser and can be hosted &lt;strong&gt;locally&lt;/strong&gt;, on &lt;strong&gt;Shiny Server&lt;/strong&gt;, or deployed to &lt;strong&gt;ShinyApps.io&lt;/strong&gt; or other cloud platforms.&#xD;&#xA;R Shiny is a game-changer for those who want to create &lt;strong&gt;interactive applications&lt;/strong&gt; and &lt;strong&gt;data-driven dashboards&lt;/strong&gt; without needing deep web development expertise. Whether you’re an analyst, researcher, or developer, Shiny provides a powerful and flexible way to bring your data to life.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
